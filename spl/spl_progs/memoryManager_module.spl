alias funcNum R1;

//Get Free Page
if (funcNum == 1) then
	//incrementing Wait Mem Count
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] + 1;
	
	//keep calling scheduler while memory full
	while ([SYSTEM_STATUS_TABLE + 2] == 0) do
		
		//set process state to WAIT_MEM
		[PROCESS_TABLE + (16 * [SYSTEM_STATUS_TABLE + 1]) + 4] = WAIT_MEM;
		
		call SCHEDULER;
	endwhile;

	//decrementing Wait Mem Count and Mem Free Count
	[SYSTEM_STATUS_TABLE + 3] = [SYSTEM_STATUS_TABLE + 3] - 1;
	[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] - 1;
	
	//finding free page
	alias counter R4;
	alias retValue R0;

	counter = 0;
	while (counter < 128) do
		if([MEMORY_FREE_LIST + counter] == 0) then
			[MEMORY_FREE_LIST + counter] = 1;
			retValue = counter;
			break;
		endif;
		counter = counter  + 1;
	endwhile;
	return;
endif;

//Release Page
if (funcNum == 2) then
	alias pageNo R2;

	//decrementing entry in Memory Free List
	[MEMORY_FREE_LIST + pageNo] = [MEMORY_FREE_LIST + pageNo] - 1;

	//incrementing Mem Free Count if page is free
	if ([MEMORY_FREE_LIST + pageNo] == 0) then
		[SYSTEM_STATUS_TABLE + 2] = [SYSTEM_STATUS_TABLE + 2] + 1;
	endif;
	
	//Setting status of all WAIT_MEM processes to READY
	alias counter R4;
	counter = 0;
	while (counter < 16) do
		if([PROCESS_TABLE + (16 * counter) + 4] == WAIT_MEM) then
			[PROCESS_TABLE + (16 * counter) + 4] = READY;
		endif;
		counter = counter + 1;
	endwhile;
	return;
endif;

//Release Block
if (funcNum == 4) then
	alias blockNo R2;
	alias PID R3;

	[DISK_FREE_LIST + blockNo] = [DISK_FREE_LIST + blockNo] - 1;

	return;
endif;

//Get Code Page
if (funcNum == 5) then
	alias codePage R0;
	alias blockNo R2;
	
	//checking Disk Map Table entries of all processes if block alreading loaded 
	alias PID R6;
	PID = 0;
	while (PID < 16) do
		if ([DISK_MAP_TABLE + (PID * 10) + 4] == blockNo && [PAGE_TABLE_BASE + (PID * 20) + 8] != -1) then
			codePage = [PAGE_TABLE_BASE + (PID * 20) + 8];
			[MEMORY_FREE_LIST + codePage] = [MEMORY_FREE_LIST + codePage] + 1;
			break;
		endif;
		if ([DISK_MAP_TABLE + (PID * 10) + 5] == blockNo && [PAGE_TABLE_BASE + (PID * 20) + 10] != -1) then
			codePage = [PAGE_TABLE_BASE + (PID * 20) + 10];
			[MEMORY_FREE_LIST + codePage] = [MEMORY_FREE_LIST + codePage] + 1;
			break;
		endif;
		if ([DISK_MAP_TABLE + (PID * 10) + 6] == blockNo && [PAGE_TABLE_BASE + (PID * 20) + 12] != -1) then
			codePage = [PAGE_TABLE_BASE + (PID * 20) + 12];
			[MEMORY_FREE_LIST + codePage] = [MEMORY_FREE_LIST + codePage] + 1;
			break;
		endif;
		if ([DISK_MAP_TABLE + (PID * 10) + 7] == blockNo && [PAGE_TABLE_BASE + (PID * 20) + 14] != -1) then
			codePage = [PAGE_TABLE_BASE + (PID * 20) + 14];
			[MEMORY_FREE_LIST + codePage] = [MEMORY_FREE_LIST + codePage] + 1;
			break;
		endif;
		PID = PID + 1;
	endwhile;
	//code page not in memory
	if (PID == 16) then
		//calling Get Free Page
		multipush(R1, R2, R3, R4);
		funcNum = GET_FREE_PAGE;
		call MEMORY_MANAGER;
		multipop(R1, R2, R3, R4);

		//Loading code block to free page by calling Disk Load
		breakpoint;
		multipush(R0, R1, R2, R3, R4);
		funcNum = DISK_LOAD;
		R3 = codePage;
		R4 = blockNo;
		R2 = [SYSTEM_STATUS_TABLE + 1];
		call DEVICE_MANAGER;
		multipop(R0, R1, R2, R3, R4);

	endif;
	return;
endif;
			

return;
