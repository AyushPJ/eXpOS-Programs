//Load shared library
loadi(63,13);
loadi(64,14);

//Load Inode Table
loadi(59,3);
loadi(60,4);

//Load INT10 module
loadi(22,35);
loadi(23,36);

//Load INT7 module
loadi(16,29);
loadi(17,30);

//Load INT6 module
loadi(14,27);
loadi(15,28);

//Load INT9 module
loadi(20,33);
loadi(21,34);

//Load exception handler
loadi(2,15);
loadi(3,16);

//Load timer interrupt routine
loadi(4,17);
loadi(5,18);

//Load Disk Interrupt routine
loadi(6,19);
loadi(7,20);

//Load Console Interrupt Handler
loadi(8,21);
loadi(9,22);

//Load INIT Process
loadi(65,7);
loadi(66,8);

//Page Table Setup
PTLR = 10;

//Process Table Setup
alias procTable R0;

//Load Resource Manager (MOD_0)
loadi(40,53);
loadi(41,54);

//Load Process Manager (MOD_1)
loadi(42,55);
loadi(43,56);

//Load Memory Manager (MOD_2)
loadi(44,57);
loadi(45,58);

//Load Device Manager (MOD_4)
loadi(48,61);
loadi(49,62);

//Load Scheduler (MOD_5)
loadi(50,63);
loadi(51,64);

alias counter R1;

//Initializing Memory Free List
counter = 0;
while (counter < 76) do
	[MEMORY_FREE_LIST + counter] = 1;
	counter = counter + 1;
endwhile;

while (counter < 128) do
	counter  = counter + 1;
	[MEMORY_FREE_LIST + counter] = 0;
endwhile;

//Initializing Terminal Status to free, i.e., 0
[TERMINAL_STATUS_TABLE] = 0;

//Setting all entries' state in process table to TERMINATED
counter = 0;
while(counter<=15) do
	procTable = PROCESS_TABLE + (counter*16);
	[procTable + 4] = TERMINATED;
	counter = counter + 1;
endwhile;

//Initializing  Disk Status to free, i.e., 0
[DISK_STATUS_TABLE] = 0;

//INIT Process

//Page Table
PTBR = PAGE_TABLE_BASE+20;

//Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Heap
[PTBR + 4] = 78;
[PTBR + 5] = "0110";
[MEMORY_FREE_LIST + 78] = 1;
[PTBR + 6] = 79;
[PTBR + 7] = "0110";
[MEMORY_FREE_LIST + 79] = 1;

//Code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";
[PTBR + 10] = 66;
[PTBR + 11] = "0100";
[PTBR + 12] = -1;
[PTBR + 13] = "0000";
[PTBR + 14] = -1;
[PTBR + 15] = "0000";

//Stack
[PTBR + 16] = 76;
[PTBR + 17] = "0110";
[MEMORY_FREE_LIST + 76] = 1;
[PTBR + 18] = 77;
[PTBR + 19] = "0110";
[MEMORY_FREE_LIST + 77] = 1;

//Process Table
procTable = PROCESS_TABLE + 16;
[procTable + 1] = 1;
[procTable + 4] = CREATED;
[procTable + 11] = 80;
[MEMORY_FREE_LIST + 80] = 1;
[procTable + 12] = 0;
[procTable + 13] = 8*512;
[procTable + 14] = PTBR;
[procTable + 15] = PTLR;

//Initializing per-process resource table of init
counter = 0;
while(counter < 8) do
	[(([procTable + 11] + 1) * 512) - 2 - (2 * counter)] = -1;
	counter = counter + 1;
endwhile;

//entry point IP value fetched from top of stack for executing INIT after IRET
[76*512] = [65 * 512 + 1];

////Load even program
//loadi(85,69);
//
////even Program
//
////Page Table
//PTBR = PAGE_TABLE_BASE+40;
//
////Library
//[PTBR + 0] = 63;
//[PTBR + 1] = "0100";
//[PTBR + 2] = 64;
//[PTBR + 3] = "0100";
//
////Heap
//[PTBR + 4] = 83;
//[PTBR + 5] = "0110";
//[MEMORY_FREE_LIST + 83] = 1;
//[PTBR + 6] = 84;
//[PTBR + 7] = "0110";
//[MEMORY_FREE_LIST + 84] = 1;
//
////Code
//[PTBR + 8] = 85;
//[PTBR + 9] = "0100";
//[MEMORY_FREE_LIST + 85] = 1;
//[PTBR + 10] = -1;
//[PTBR + 11] = "0000";
//[PTBR + 12] = -1;
//[PTBR + 13] = "0000";
//[PTBR + 14] = -1;
//[PTBR + 15] = "0000";
//
////Stack
//[PTBR + 16] = 86;
//[PTBR + 17] = "0110";
//[MEMORY_FREE_LIST + 86] = 1;
//[PTBR + 18] = 87;
//[PTBR + 19] = "0110";
//[MEMORY_FREE_LIST + 87] = 1;
//
////Process Table
//procTable = PROCESS_TABLE + 32;
//[procTable + 1] = 2;
//[procTable + 4] = CREATED;
//[procTable + 11] = 88;
//[MEMORY_FREE_LIST + 88] = 1;
//[procTable + 12] = 0;
//[procTable + 13] = 8*512;
//[procTable + 14] = PTBR;
//[procTable + 15] = PTLR;
//
////entry point IP value fetched from top of stack for executing even program after IRET
//[86*512] = [85 * 512 + 1];
//
////Load prime program
//loadi(91,70);
//
////prime Program
//
////Page Table
//PTBR = PAGE_TABLE_BASE+60;
//
////Library
//[PTBR + 0] = 63;
//[PTBR + 1] = "0100";
//[PTBR + 2] = 64;
//[PTBR + 3] = "0100";
//
////Heap
//[PTBR + 4] = 89;
//[PTBR + 5] = "0110";
//[PTBR + 6] = 90;
//[PTBR + 7] = "0110";
//
////Code
//[PTBR + 8] = 91;
//[PTBR + 9] = "0100";
//[PTBR + 10] = -1;
//[PTBR + 11] = "0000";
//[PTBR + 12] = -1;
//[PTBR + 13] = "0000";
//[PTBR + 14] = -1;
//[PTBR + 15] = "0000";
//
////Stack
//[PTBR + 16] = 92;
//[PTBR + 17] = "0110";
//[PTBR + 18] = 93;
//[PTBR + 19] = "0110";
//
////Process Table
//procTable = PROCESS_TABLE + 48;
//[procTable + 1] = 3;
//[procTable + 4] = CREATED;
//[procTable + 11] = 94;
//[procTable + 12] = 0;
//[procTable + 13] = 8*512;
//[procTable + 14] = PTBR;
//[procTable + 15] = PTLR;
//
////entry point IP value fetched from top of stack for executing prime program after IRET
//[92*512] = [91 * 512 + 1];

//Initializing Wait Mem Count and Mem Free Count in System Status Table
[SYSTEM_STATUS_TABLE + 3] = 0;
//(Total - Reserved - Allocated) 
[SYSTEM_STATUS_TABLE + 2] = 128 - 76 - 7;


return;
