//Load shared library
loadi(63,13);
loadi(64,14);

//Load Inode Table
loadi(59,3);
loadi(60,4);

//Load Root File
loadi(62,5);

//Load INT17 module
loadi(36,49);
loadi(37,50);

//Load INT16 module
loadi(34,47);
loadi(35,48);

//Load INT15 module
loadi(32,45);
loadi(33,46);

//Load INT14 module
loadi(30,43);
loadi(31,44);

//Load INT13 module
loadi(28,41);
loadi(29,42);

//Load INT12 module
loadi(26,39);
loadi(27,40);

//Load INT11 module
loadi(24,37);
loadi(25,38);

//Load INT10 module
loadi(22,35);
loadi(23,36);

//Load INT9 module
loadi(20,33);
loadi(21,34);

//Load INT8 module
loadi(18,31);
loadi(19,32);

//Load INT7 module
loadi(16,29);
loadi(17,30);

//Load INT6 module
loadi(14,27);
loadi(15,28);

//Load INT5 module
loadi(12,25);
loadi(13,26);

//Load INT4 module
loadi(10,23);
loadi(11,24);

//Load exception handler
loadi(2,15);
loadi(3,16);

//Load timer interrupt routine
loadi(4,17);
loadi(5,18);

//Load Disk Interrupt routine
loadi(6,19);
loadi(7,20);

//Load Console Interrupt Handler
loadi(8,21);
loadi(9,22);

//Load INIT Process
loadi(65,7);
loadi(66,8);

//Load Shell Process
loadi(67,9);
loadi(68,10);

//Page Table Setup
PTLR = 10;

//Process Table Setup
alias procTable R0;

//Load Resource Manager (MOD_0)
loadi(40,53);
loadi(41,54);

//Load Process Manager (MOD_1)
loadi(42,55);
loadi(43,56);

//Load Memory Manager (MOD_2)
loadi(44,57);
loadi(45,58);

//Load File Manager (MOD_3)
loadi(46,59);
loadi(47,60);

//Load Device Manager (MOD_4)
loadi(48,61);
loadi(49,62);

//Load Scheduler (MOD_5)
loadi(50,63);
loadi(51,64);

//Load Disk Free List
loadi(61,2);

alias counter R1;

//Initializing Open File Table
counter = 0;
while (counter < 32) do
	//setting inode index to -1 and open instance count to 0
	[OPEN_FILE_TABLE + (4 * counter)] = -1;
	[OPEN_FILE_TABLE + (4 * counter) + 1] = 0;
	counter = counter + 1;
endwhile;

//Initializing File Status Table
counter = 0;
while (counter < 60) do
	//setting locking PID and file open count to -1
	[FILE_STATUS_TABLE + (4 * counter)] = -1;
	[FILE_STATUS_TABLE + (4 * counter) + 1] = -1;
	counter = counter + 1;
endwhile;


//Initializing Buffer Table
counter = 0;
while (counter < 4) do
	//setting block number and locking PID to -1
	[BUFFER_TABLE + (4 * counter)] = -1;
	[BUFFER_TABLE + (4 * counter) + 2] = -1;

	//setting dirty bit to 0
	[BUFFER_TABLE + (4 * counter) + 1] = 0;
	counter = counter + 1;
endwhile;

//Initializing Semaphore Table
counter = 0;
while (counter < 32) do
	[SEMAPHORE_TABLE + (4 * counter)] = -1;
	[SEMAPHORE_TABLE + (4 * counter) + 1] = 0;
	counter = counter + 1;
endwhile;

//Initializing Memory Free List
counter = 0;
while (counter < 76) do
	[MEMORY_FREE_LIST + counter] = 1;
	counter = counter + 1;
endwhile;

while (counter < 128) do
	[MEMORY_FREE_LIST + counter] = 0;
	counter  = counter + 1;
endwhile;

//Initializing Terminal Status to free, i.e., 0
[TERMINAL_STATUS_TABLE] = 0;

//Setting all entries' state in process table to TERMINATED
counter = 0;
while(counter<=15) do
	procTable = PROCESS_TABLE + (counter*16);
	[procTable + 4] = TERMINATED;
	counter = counter + 1;
endwhile;

//Initializing  Disk Status to free, i.e., 0
[DISK_STATUS_TABLE] = 0;

//INIT Process

//Page Table
PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;
//initializing all entries to invalid
counter = 0;
while (counter < 10) do
	[PTBR + (2*counter)] = -1;
	[PTBR + (2*counter) + 1] = "0000";
	counter = counter + 1;
endwhile;

//Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Code
[PTBR + 8] = 65;
[PTBR + 9] = "0100";

//Stack
[PTBR + 16] = 66;
[PTBR + 17] = "0110";

//Process Table
procTable = PROCESS_TABLE + 16;
[procTable + 1] = 1;
[procTable + 3] = 1; 		//user ID is 1 (root)
[procTable + 4] = CREATED;
[procTable + 11] = 77;
[MEMORY_FREE_LIST + 77] = 1;
[procTable + 12] = 0;
[procTable + 13] = 8*512;
[procTable + 14] = PTBR;
[procTable + 15] = PTLR;

//Initializing per-process resource table of init
counter = 0;
alias resrcTable R2;
resrcTable = (([procTable + 11] + 1) * 512) - 16;
while(counter < 8) do
	[resrcTable + (2 * counter)] = -1;
	counter = counter + 1;
endwhile;

//entry point IP value fetched from top of stack for executing INIT after IRET
[66*512] = [65 * 512 + 1];

//Shell Process

//Page Table
PTBR = PAGE_TABLE_BASE+40;
PTLR = 10;
//initializing all entries to invalid
counter = 0;
while (counter < 10) do
	[PTBR + (2*counter)] = -1;
	[PTBR + (2*counter) + 1] = "0000";
	counter = counter + 1;
endwhile;

//Library
[PTBR + 0] = 63;
[PTBR + 1] = "0100";
[PTBR + 2] = 64;
[PTBR + 3] = "0100";

//Code
[PTBR + 8] = 67;
[PTBR + 9] = "0100";
[PTBR + 10] = 68;
[PTBR + 11] = "0100";

//Stack
[PTBR + 16] = 78;
[PTBR + 17] = "0110";
[MEMORY_FREE_LIST + 78] = 1;
[PTBR + 18] = 79;
[PTBR + 19] = "0110";
[MEMORY_FREE_LIST + 79] = 1;

//Process Table
procTable = PROCESS_TABLE + 32;
[procTable + 1] = 2;
[procTable + 2] = 1;
[procTable + 3] = 1; 		//user ID is 1 (root)
[procTable + 4] = TERMINATED;
[procTable + 11] = 80;
[MEMORY_FREE_LIST + 80] = 1;
[procTable + 12] = 0;
[procTable + 13] = 8*512;
[procTable + 14] = PTBR;
[procTable + 15] = PTLR;

//Initializing per-process resource table of shell
counter = 0;
resrcTable = (([procTable + 11] + 1) * 512) - 16 ;
while(counter < 8) do
	[resrcTable + (2 * counter)] = -1;
	counter = counter + 1;
endwhile;

//Initializing Disk Map Table for shell
alias dmt R2;
dmt = (DISK_MAP_TABLE + (2*10));
counter = 2;

while (counter < 9) do
	[dmt + counter] = -1;
	counter = counter + 1;
endwhile;

[dmt + 4] = 67;
[dmt + 5] = 68;

//entry point IP value fetched from top of stack for executing INIT after IRET
[78*512] = [67 * 512 + 1];

//Initializing Wait Mem Count and Mem Free Count in System Status Table
[SYSTEM_STATUS_TABLE + 3] = 0;
//(Total - Reserved - Allocated) 
[SYSTEM_STATUS_TABLE + 2] = 128 - 76 - 5;

return;
