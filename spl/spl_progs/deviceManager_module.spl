alias functionNum R1;
alias currentPID R2;

//Disk Store
if (functionNum == 1) then
	//Calling Acquire Disk
	multipush(R1, R2, R3, R4);
	functionNum = 3;
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3, R4);
	
	alias pageNo R3;
	alias blockNo R4;
	
	//Setting Load/Store Bit, setting Page no. and block no. in Disk Status Table
	[DISK_STATUS_TABLE + 1] = 1;
	[DISK_STATUS_TABLE + 2] = pageNo;
	[DISK_STATUS_TABLE + 3] = blockNo;
	store([DISK_STATUS_TABLE + 2], [DISK_STATUS_TABLE + 3]);

	//setting process state to WAIT_DISK
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_DISK;

	call SCHEDULER;
	
	return;
endif;
		

//Disk Load
if (functionNum == 2) then
	//Calling Acquire Disk
	multipush(R1, R2, R3, R4);
	functionNum = 3;
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3, R4);
	
	alias pageNo R3;
	alias blockNo R4;
	//Resetting Load/Store Bit, setting Page no. and block no. in Disk Status Table	
	[DISK_STATUS_TABLE + 1] = 0;
	[DISK_STATUS_TABLE + 2] = pageNo;
	[DISK_STATUS_TABLE + 3] = blockNo;
	load([DISK_STATUS_TABLE + 2], [DISK_STATUS_TABLE + 3]);

	//setting process state to WAIT_DISK
	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_DISK;

	call SCHEDULER;

	return;
endif;

//Terminal Write
if (functionNum == 3) then
	alias word R3;
	//Calling Acquire Terminal
	multipush(R1, R2, R3);
	functionNum = 8;
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3);
	
	print word;	
	
	//Calling Release Terminal
	multipush(R1, R2, R3);
	functionNum = 9;
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3);
	return;
endif;

//Terminal Read
if (functionNum == 4) then
	alias word R3;
	//Calling Acquire Terminal
	multipush(R1, R2, R3);
	functionNum = 8;
	call RESOURCE_MANAGER;
	multipop(R1, R2, R3);
	
	read;

	[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_TERMINAL;
	
	multipush(R1, R2, R3);
	call SCHEDULER;
	multipop(R1, R2, R3);
	//Converting logical address sent in R3 to physical address
	alias wordPhyAddr R4;
	wordPhyAddr = [PTBR + 2 * ((word) / 512)] * 512 + ((word) % 512);
	//Copying input from input buffer to specified address
	[wordPhyAddr] = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 8];
	return;
endif;


return;
