alias functionNum R1;

//Acquire Buffer
if (functionNum == 1) then
	alias bufferNum R2;
	alias PID R3;
	alias bufferTableEntry R10;
	bufferTableEntry = BUFFER_TABLE + (4 * bufferNum);
	while([bufferTableEntry + 2] != -1) do
		//setting process state to (WAIT_BUFFER, buffer number)
		[PROCESS_TABLE + (PID * 16) + 4] = WAIT_BUFFER;
		[PROCESS_TABLE + (PID * 16) + 5] = bufferNum;
		multipush(R2, R3, R10);
		call SCHEDULER;
		multipop(R2, R3, R10);
	endwhile;

	//locking buffer by setting locking PID to PID of process
	[bufferTableEntry + 2] = PID;

	return;
endif;

//Release Buffer
if (functionNum == 2) then
	alias bufferNum R2;
	alias PID R3;
	alias bufferTableEntry R10;
	bufferTableEntry = BUFFER_TABLE + (4 * bufferNum);

	//PID given is not the locking PID
	if (PID != [bufferTableEntry + 2]) then
		//return value is -1
		R0 = -1;
		
		return;
	endif;

	//releasing lock on buffer by setting locking PID to -1
	[bufferTableEntry + 2] = -1;

	//waking up all processes waiting for the buffer
	alias counter R6;
	counter = 0;
	while(counter < 16) do
		alias processTableEntry R11;
		processTableEntry = PROCESS_TABLE + (counter * 16);
		//process state is (WAIT_BUFFER, buffer number)
		if ([processTableEntry + 4] == WAIT_BUFFER && [processTableEntry + 5] == bufferNum) then
			[processTableEntry + 4] = READY;
		endif;
		counter = counter + 1;
	endwhile;

	//return value is 0
	R0 = 0;

	return;
endif;

//Acquire Disk
if (functionNum == 3) then
	alias currentPID R2;
	while([DISK_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_DISK;
		multipush(R1, R2);
		call SCHEDULER;
		multipop(R1, R2);
	endwhile;
	[DISK_STATUS_TABLE] = 1;
	[DISK_STATUS_TABLE + 4] = currentPID;

	return;
endif;

//Acquire Inode
if (functionNum == 4) then
	alias inodeIndex R2;
	alias PID R3;

	//file locked by another process
	while ([FILE_STATUS_TABLE + (4 * inodeIndex)] != -1) do
		//set state of current process to (WAIT_FILE, inode index)
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 4] = WAIT_FILE;
		[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 5] = inodeIndex;
		call SCHEDULER;
	endwhile;

	//if file was deleted
	if ([INODE_TABLE + (inodeIndex * 16) + 1] == -1) then
		//return -1
		R0 = -1;
		return;
	endif;

	//locking the file
	[FILE_STATUS_TABLE + (4 * inodeIndex)] = PID;

	//return 0
	R0 = 0;
	return;
endif;

//Release Inode
if (functionNum == 5) then
	alias inodeIndex R2;
	alias PID R3;
	
	//file not locked by current process
	if ([FILE_STATUS_TABLE + (4 * inodeIndex)] != PID) then
		//return -1
		R0 = -1;
		return;
	endif;

	//releasing lock on file
	[FILE_STATUS_TABLE + (4 * inodeIndex)] = -1;

	//waking up all process waiting for file
	alias counter R6;
	while (counter < 16) do
		//process state is (WAIT_FILE, inode index)
		if ([PROCESS_TABLE + (counter * 16) + 4] == WAIT_FILE
			&& [PROCESS_TABLE + (counter * 16) + 5] == inodeIndex
		) then
			//set the process' state to READY
			[PROCESS_TABLE + (counter * 16) + 4] = READY;
		endif;
		counter = counter + 1;
	endwhile;
	
	//return 0
	R0 = 0;
	
	return;
endif;
	

//Acquire Semaphore
if (functionNum == 6) then
	alias PID R2;

	//finding free entry in semaphore table
	alias counter R6;
	counter = 0;
	while (counter < 32) do
		//checking if process count is 0
		if ([SEMAPHORE_TABLE + (counter * 4) + 1] == 0) then
			break;
		endif;
		counter = counter + 1;
	endwhile;

	//no free entry found
	if (counter == 32) then
		//return value is -1
		R0 = -1;
		return;
	endif;

	//free entry found
	
	//setting process count to 1
	[SEMAPHORE_TABLE + (counter * 4) + 1] = 1;
	//setting locking pid to -1
	[SEMAPHORE_TABLE + (counter * 4)] = -1;
	
	//return value is semaphore table index
	R0 = counter;

	return;
endif;

//Release Semaphore
if (functionNum == 7) then
	
	alias semIndex R2;
	alias PID R3;

	//semaphore locked by current process
	if ([SEMAPHORE_TABLE + (semIndex * 4)] == PID) then
		//setting locking PID to -1
		[SEMAPHORE_TABLE + (semIndex * 4)] = -1;

		//waking up all process blocked by the semaphore
		alias counter R6;
		alias procTable R7;
		counter = 0;
		while (counter < 16) do
			procTable = PROCESS_TABLE + (counter * 16);
			//checking if state of process is (WAIT_SEMAPHORE, semIndex)
			if ([procTable + 4] == WAIT_SEMAPHORE && [procTable + 5] == semIndex) then
				[procTable + 4] = READY;
			endif;
			counter = counter + 1;
		endwhile;
	endif;

	//decrementing process count of semaphore
	[SEMAPHORE_TABLE + (semIndex * 4) + 1] = [SEMAPHORE_TABLE + (semIndex * 4) + 1] - 1;

	return;
endif;

//Acquire Terminal
if (functionNum == 8) then
	alias currentPID R2;
	while([TERMINAL_STATUS_TABLE] == 1) do
		[PROCESS_TABLE + (currentPID * 16) + 4] = WAIT_TERMINAL;
		multipush(R1, R2);
		call SCHEDULER;
		multipop(R1, R2);
	endwhile;
	[TERMINAL_STATUS_TABLE] = 1;
	[TERMINAL_STATUS_TABLE + 1] = currentPID;
	return;
endif;

//Release Terminal
if (functionNum == 9) then
	alias currentPID R2;
	if ([TERMINAL_STATUS_TABLE + 1] != currentPID) then
		alias retValue R0;
		retValue = -1;
		return;
	else
		[TERMINAL_STATUS_TABLE] = 0;
		alias PID R10;
		PID = 0;
		while (PID <= 15) do
			if ([PROCESS_TABLE + (PID*16) + 4] == WAIT_TERMINAL) then
				[PROCESS_TABLE + (PID*16) + 4] = READY;
			endif;
			PID = PID + 1;
		endwhile;
		alias retValue R0;
		retValue = 0;
		return;
	endif;
endif;
	
