alias funcNum R1;

//Get PCB Entry
if (funcNum == 1) then
	alias counter R6;
	counter = 0;
	//searching for a TERMINATED process
	while (counter < 16) do
		if ([PROCESS_TABLE + (counter * 16) + 4] == TERMINATED) then
			break;
		endif;
		counter = counter + 1;
	endwhile;
	alias retVal R0;
	//no free process table entry found
	if (counter == 16) then
		retVal = -1;
	else
		//initializing PID, PTBR and PTLR entries in process table and setting STATE to ALLOCATED
		[PROCESS_TABLE + (counter * 16) + 1] = counter;
		[PROCESS_TABLE + (counter * 16) + 14] = PAGE_TABLE_BASE + (counter * 20);
		[PROCESS_TABLE + (counter * 16) + 15] = 10;
		[PROCESS_TABLE + (counter * 16) + 4] = ALLOCATED;
		retVal = counter;
	endif;
	return;
endif;

//Free User Area Page
if (funcNum == 2) then
	alias PID R2;
	alias userAreaPageNo R4;
	userAreaPageNo = [PROCESS_TABLE + (16 * PID) + 11];
	//calling Release Page
	multipush(R1, R2);
	funcNum = RELEASE_PAGE;
	R2 = userAreaPageNo;
	call MEMORY_MANAGER;
	multipop(R1, R2);
	return;
endif;

//Exit Process
if (funcNum == 3) then
	alias PID R2;

	//calling Free Page Table
	multipush(R1,R2);
	funcNum = FREE_PAGE_TABLE;
	call PROCESS_MANAGER;
	multipop(R1,R2);	

	//calling Free User Area Page
	multipush(R1,R2);
	funcNum = FREE_USER_AREA_PAGE;
	call PROCESS_MANAGER;
	multipop(R1,R2);
	[PROCESS_TABLE + (16 * PID) + 4] = TERMINATED;

	return;
endif;

//Free Page Table
if (funcNum == 4) then
	alias PID R2;	
	//invalidating library page entries
	[PTBR + 0] = -1;
	[PTBR + 1] = "0000";
	[PTBR + 2] = -1;
	[PTBR + 3] = "0000";

	//calling Release Page and invalidating page table entries for remaining pages
	multipush(R1, R2);
	alias pageNo R2;
	funcNum = RELEASE_PAGE;
	//Heap
	pageNo = [PTBR + 4];
	if(pageNo != -1) then
		call MEMORY_MANAGER;
		[PTBR + 4] = -1;
		[PTBR + 5] = "0000";
	endif;
	pageNo = [PTBR + 6];
	if(pageNo != -1) then
		call MEMORY_MANAGER;
		[PTBR + 6] = -1;
		[PTBR + 7] = "0000";
	endif;
	//Code
	pageNo = [PTBR + 8];
	if(pageNo != -1) then
		call MEMORY_MANAGER;
		[PTBR + 8] = -1;
		[PTBR + 9] = "0000";
	endif;
	pageNo = [PTBR + 10];
	if(pageNo != -1) then
		call MEMORY_MANAGER;
		[PTBR + 10] = -1;
		[PTBR + 11] = "0000";
	endif;
	pageNo = [PTBR + 12];
	if(pageNo != -1) then
		call MEMORY_MANAGER;
		[PTBR + 12] = -1;
		[PTBR + 13] = "0000";
	endif;
	pageNo = [PTBR + 14];
	if(pageNo != -1) then
		call MEMORY_MANAGER;
		[PTBR + 14] = -1;
		[PTBR + 15] = "0000";
	endif;

	//Stack
	pageNo = [PTBR + 16];
	call MEMORY_MANAGER;
	[PTBR + 16] = -1;
	[PTBR + 17] = "0000";
	pageNo = [PTBR + 18];
	call MEMORY_MANAGER;
	[PTBR + 18] = -1;
	[PTBR + 19] = "0000";

	multipop(R1, R2);
	alias PID R2;
	//calling Release Block and invalidating disk map table entries for stack and heap
	//Heap
	if ([DISK_MAP_TABLE + (PID * 10) + 2] != -1) then
		//calling Release Block
		multipush(R1, R2, R3, R4);
		funcNum = RELEASE_BLOCK;
		R3 = PID;
		R2 = [DISK_MAP_TABLE + (PID * 10) + 2];
		call MEMORY_MANAGER;
		multipop(R1, R2, R3, R4);
		[DISK_MAP_TABLE + (PID * 10) + 2] = -1;
	endif;
	if ([DISK_MAP_TABLE + (PID * 10) + 3] != -1) then
		//calling Release Block
		multipush(R1, R2, R3, R4);
		funcNum = RELEASE_BLOCK;
		R3 = PID;
		R2 = [DISK_MAP_TABLE + (PID * 10) + 3];
		call MEMORY_MANAGER;
		multipop(R1, R2, R3, R4);
		[DISK_MAP_TABLE + (PID * 10) + 3] = -1;
	endif;
	
	//Stack
	if ([DISK_MAP_TABLE + (PID * 10) + 8] != -1) then
		//calling Release Block
		multipush(R1, R2, R3, R4);
		funcNum = RELEASE_BLOCK;
		R3 = PID;
		R2 = [DISK_MAP_TABLE + (PID * 10) + 8];
		call MEMORY_MANAGER;
		multipop(R1, R2, R3, R4);
		[DISK_MAP_TABLE + (PID * 10) + 8] = -1;
	endif;
	if ([DISK_MAP_TABLE + (PID * 10) + 9] != -1) then
		//calling Release Block
		multipush(R1, R2, R3, R4);
		funcNum = RELEASE_BLOCK;
		R3 = PID;
		R2 = [DISK_MAP_TABLE + (PID * 10) + 9];
		call MEMORY_MANAGER;
		multipop(R1, R2, R3, R4);
		[DISK_MAP_TABLE + (PID * 10) + 9] = -1;
	endif;

	//Invalidating code block entries in Disk Map Table
	[DISK_MAP_TABLE + (PID * 10) + 4] = -1;
	[DISK_MAP_TABLE + (PID * 10) + 5] = -1;
	[DISK_MAP_TABLE + (PID * 10) + 6] = -1;
	[DISK_MAP_TABLE + (PID * 10) + 7] = -1;

	return;
	
endif;

return;
