alias funcNum R1;

//Get PCB Entry
if (funcNum == 1) then
	alias counter R6;
	counter = 0;
	//searching for a TERMINATED process
	while (counter < 16) do
		if ([PROCESS_TABLE + (counter * 16) + 4] == TERMINATED) then
			break;
		endif;
		counter = counter + 1;
	endwhile;
	alias retVal R0;
	//no free process table entry found
	if (counter == 16) then
		retVal = -1;
	else
		alias procTableEntry R10;
		procTableEntry = PROCESS_TABLE + (counter * 16);
		//initializing PID, PTBR and PTLR entries in process table and setting STATE to ALLOCATED
		[procTableEntry + 1] = counter;
		[procTableEntry + 14] = PAGE_TABLE_BASE + (counter * 20);
		[procTableEntry + 15] = 10;
		[procTableEntry + 4] = ALLOCATED;
		retVal = counter;
	endif;
	return;
endif;

//Free User Area Page
if (funcNum == 2) then
	alias PID R2;
	alias userAreaPageNo R7;
	userAreaPageNo = [PROCESS_TABLE + (16 * PID) + 11];

	//releasing semaphores and closing files
	alias resourceTable R10;
	resourceTable = ((userAreaPageNo + 1) * 512) - 16;
	alias counter R6;
	counter = 0;
	while (counter < 8) do
		if([resourceTable + (2 * counter)] == SEMAPHORE) then
			
			//calling release semaphore
			multipush(R1, R2, R6, R7, R10);
			R1 = RELEASE_SEMAPHORE;	//function number
			R2 = [resourceTable + (2 * counter) + 1]; //semaphore table index
			R3 = [SYSTEM_STATUS_TABLE + 1];	//PID
			call RESOURCE_MANAGER;
			multipop(R1, R2, R6, R7, R10);

			//invalidating the per-process resource table entry
			[resourceTable + (2 * counter)] = -1;

		endif;
		
		if([resourceTable + (2 * counter)] == FILE) then
			
			//calling close function in file manager module
			multipush(R1, R2, R6, R7, R10);
			R1 = CLOSE;	//function number
			R2 = [resourceTable + (2 * counter) + 1]; //open file table index
			call FILE_MANAGER;
			multipop(R1, R2, R6, R7, R10);

			//invalidating the per-process resource table entry
			[resourceTable + (2 * counter)] = -1;

		endif;
		counter = counter + 1;
	endwhile;
	//calling Release Page
	multipush(R1, R2);
	funcNum = RELEASE_PAGE;
	R2 = userAreaPageNo;
	call MEMORY_MANAGER;
	multipop(R1, R2);
	return;
endif;

//Exit Process
if (funcNum == 3) then
	alias PID R2;

	//calling Free Page Table
	multipush(R1,R2);
	funcNum = FREE_PAGE_TABLE;
	call PROCESS_MANAGER;
	multipop(R1,R2);	

	//calling Free User Area Page
	multipush(R1,R2);
	funcNum = FREE_USER_AREA_PAGE;
	call PROCESS_MANAGER;
	multipop(R1,R2);

	//if Exit Process function was not invoked by an Exec system call (checked using value in MODE FLAG)
	if ([PROCESS_TABLE + (PID * 16) + 9] != 9) then
		alias counter R6;
		counter = 0;
		while (counter < 16) do
			alias procTableEntry R10;
			procTableEntry = PROCESS_TABLE + (counter * 16);
			//wake up processes waiting for current process
			if ([procTableEntry + 4] == WAIT_PROCESS && [procTableEntry + 5] == PID) then
				[procTableEntry + 4] = READY;
			endif;
	
			//set children of current process as orphan processes by setting their PPID to -1
			if ([procTableEntry + 2] == PID) then
				[procTableEntry + 2] = -1;
			endif;
			counter = counter + 1;
		endwhile;
	endif;
	
	[PROCESS_TABLE + (16 * PID) + 4] = TERMINATED;
	return;
endif;

//Free Page Table
if (funcNum == 4) then
	alias PID R2;	
	//invalidating library page entries
	[PTBR + 0] = -1;
	[PTBR + 1] = "0000";
	[PTBR + 2] = -1;
	[PTBR + 3] = "0000";

	//calling Release Page and invalidating page table entries for remaining pages
	multipush(R1, R2);
	alias pageNo R2;
	alias counter R6;
	counter = 2;
	while (counter < 10) do
		funcNum = RELEASE_PAGE;
		pageNo = [PTBR + (2*counter)];
		if(pageNo != -1) then
			multipush(R6);
			call MEMORY_MANAGER;
			multipop(R6);
			[PTBR + (2 * counter)] = -1;
			[PTBR + (2 * counter) + 1] = "0000";
		endif;
		counter = counter + 1;
	endwhile;
	multipop(R1, R2);

	alias PID R10;
	PID = R2;
	alias diskMapTableEntry R11;
	diskMapTableEntry = DISK_MAP_TABLE + (PID * 10);
	//calling Release Block and invalidating disk map table entries for stack and heap
	//Heap
	if ([diskMapTableEntry + 2] != -1) then
		//calling Release Block
		multipush(R10, R11);
		funcNum = RELEASE_BLOCK;
		R3 = PID;
		R2 = [diskMapTableEntry + 2];
		call MEMORY_MANAGER;
		multipop(R10, R11);
		[diskMapTableEntry + 2] = -1;
	endif;
	if ([diskMapTableEntry + 3] != -1) then
		//calling Release Block
		multipush(R10, R11);
		funcNum = RELEASE_BLOCK;
		R3 = PID;
		R2 = [diskMapTableEntry + 3];
		call MEMORY_MANAGER;
		multipop(R10, R11);
		[diskMapTableEntry + 3] = -1;
	endif;
	
	//Stack
	if ([diskMapTableEntry + 8] != -1) then
		//calling Release Block
		multipush(R10, R11);
		funcNum = RELEASE_BLOCK;
		R3 = PID;
		R2 = [diskMapTableEntry + 8];
		call MEMORY_MANAGER;
		multipop(R10, R11);
		[diskMapTableEntry + 8] = -1;
	endif;
	if ([diskMapTableEntry + 9] != -1) then
		//calling Release Block
		multipush(R10, R11);
		funcNum = RELEASE_BLOCK;
		R3 = PID;
		R2 = [diskMapTableEntry + 9];
		call MEMORY_MANAGER;
		multipop(R10, R11);
		[diskMapTableEntry + 9] = -1;
	endif;

	//Invalidating code block entries in Disk Map Table
	[diskMapTableEntry + 4] = -1;
	[diskMapTableEntry + 5] = -1;
	[diskMapTableEntry + 6] = -1;
	[diskMapTableEntry + 7] = -1;

	return;
	
endif;

//Kill All
if (funcNum == 5) then
	alias PID R10;
	PID = R2;

	//locking all files in inode table
	alias counter R6;
	counter = 0;
	while (counter < 60) do
		alias inodeTableEntry R11;
		inodeTableEntry = INODE_TABLE + (16 * counter);
		
		//entry is valid
		if ([inodeTableEntry + 1] != -1) then
			//locking the inode
			multipush(R6, R10, R11);
			R1 = ACQUIRE_INODE;	//function number
			R2 = counter;		//inode index
			R3 = PID;		//PID
			call RESOURCE_MANAGER;
			multipop(R6, R10, R11);
		endif;
		counter = counter + 1;
	endwhile;
	
	//exiting all processes except idle, init, and function callee
	counter = 2;
	while (counter < 16) do
		if (counter != PID
			&& [PROCESS_TABLE + (counter * 16) + 4] != TERMINATED
		) then
			//calling exit process
			multipush(R6, R10);
			R1 = EXIT_PROCESS;
			R2 = counter;
			call PROCESS_MANAGER;
			multipop(R6, R10);
		endif;
		counter = counter + 1;
	endwhile;

	//unlocking all locked files in inode table
	counter = 0;
	while (counter < 60) do
		alias inodeTableEntry R11;
		inodeTableEntry = INODE_TABLE + (16 * counter);
		
		//entry is valid
		if ([inodeTableEntry + 1] != -1) then
			//locking the inode
			multipush(R6, R10, R11);
			R1 = RELEASE_INODE;	//function number
			R2 = counter;		//inode index
			R3 = PID;		//PID
			call RESOURCE_MANAGER;
			multipop(R6, R10, R11);
		endif;
		counter = counter + 1;
	endwhile;
	
	return;
endif;
