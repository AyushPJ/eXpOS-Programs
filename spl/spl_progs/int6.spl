//Setting MODE flag to 7 (for read system call)
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] =  7;

//Storing SP in UPTR field of process table
alias userSP R10;
userSP = SP;
[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13] = userSP;

//Switching to kernel stack
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;
 
alias fileDescriptor R11;
fileDescriptor  = [([PTBR + 2 * ((userSP - 4) / 512)] * 512) + ((userSP - 4) % 512)];

//Checking if file descriptor val is -1 for terminal else file
if (fileDescriptor == -1) then
	alias wordaddr R12;
	wordaddr  = [([PTBR + 2 * ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)];
	multipush(R10, R11, R12);
	R1 = 4;
	R2 = [SYSTEM_STATUS_TABLE + 1];
	R3 = wordaddr;
	call DEVICE_MANAGER;
	multipop(R10, R11, R12);
	alias physicalAddrRetVal R3;
        physicalAddrRetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
        [physicalAddrRetVal] = 0;

	SP = userSP;

	//Reset MODE FLAG to 0
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

	ireturn;

else
	alias retAddr  R12;
	retAddr = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	
	//invalid file descriptor;
	if (fileDescriptor < 0 || fileDescriptor > 7) then
		//return value is -1
		[retAddr] = -1;
	
		SP = userSP;

		//Reset MODE FLAG to 0
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

		ireturn;
	
	endif;
	
	alias resourceTableEntry R13;
	resourceTableEntry = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512) + RESOURCE_TABLE_OFFSET + (2 * fileDescriptor);
	
	if ([resourceTableEntry] == -1 		//resource identifier is invalid
		|| [resourceTableEntry != FILE]	//resource is not a file
	) then
		//return value is -1
		[retAddr] = -1;

		SP = userSP;

		//Reset MODE FLAG to 0
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

		ireturn;
	endif;
	
	alias openFileTableEntry R14;
	openFileTableEntry = OPEN_FILE_TABLE + (4 * [resourceTableEntry + 1]);
	
	alias inodeTableIndex R9;
	inodeTableIndex = [openFileTableEntry];
	
	//locking the file
	multipush(R9, R10, R11, R12, R13, R14);
	R1 = ACQUIRE_INODE;		//function number
	R2 = inodeTableIndex;		//inode index
	R3 = [SYSTEM_STATUS_TABLE + 1]; //PID
	call RESOURCE_MANAGER;	
	multipop(R9, R10, R11, R12, R13, R14);

	//acquiring lock failed
	if (R0 == -1) then
		//return value is -1
		[retAddr] = -1;
		
		SP = userSP;

		//Reset MODE FLAG to 0
		[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

		ireturn;
	endif;

	alias lSeek R8;
	lSeek = [openFileTableEntry + 2];
	
	alias memBufferAddrLogical R6;	
	memBufferAddrLogical =  [([PTBR + 2 * ((userSP - 3) / 512)] * 512) + ((userSP - 3) % 512)];

	alias memBufferAddr R7;
	memBufferAddr  = ([PTBR + 2 * ((memBufferAddrLogical) / 512)] * 512) + (memBufferAddrLogical % 512);

	//file is root file
	if ([openFileTableEntry] == INODE_ROOT) then
		//lseek at end of root file
		if (lSeek == 480) then
			//releasing lock on file
			multipush(R7, R8, R9, R10, R11, R12, R13, R14);
			R1 = RELEASE_INODE;		//function number
			R2 = inodeTableIndex;		//inode index
			R3 = [SYSTEM_STATUS_TABLE + 1]; //PID
			call RESOURCE_MANAGER;	
			multipop(R7, R8, R9, R10, R11, R12, R13, R14);
	
			//return value is -2
			[retAddr] = -2;
			
			SP = userSP;
	
			//Reset MODE FLAG to 0
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

			ireturn;
		endif;
			
		//copying word at position lseek in root file to memory buffer
		[memBufferAddr] = [ROOT_FILE + lSeek];
			
		//incrementing lseek
		[openFileTableEntry + 2] = [openFileTableEntry + 2] + 1;

	else
		alias inodeTableEntry R6;
		inodeTableEntry = INODE_TABLE + (16 * inodeTableIndex);
		//lseek at end of file (lseek equal to file size)
		if (lSeek == [inodeTableEntry + 2]) then
			//releasing lock on file
			multipush(R6, R7, R8, R9, R10, R11, R12, R13, R14);
			R1 = RELEASE_INODE;		//function number
			R2 = inodeTableIndex;		//inode index
			R3 = [SYSTEM_STATUS_TABLE + 1]; //PID
			call RESOURCE_MANAGER;	
			multipop(R6, R7, R8, R9, R10, R11, R12, R13, R14);
	
			//return value is -2
			[retAddr] = -2;

			SP = userSP;

			//Reset MODE FLAG to 0
			[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

			ireturn;
		endif;
	
		//calling Buffered Read
		multipush(R6, R7, R8, R9, R10, R11, R12, R13, R14);
		R1 = BUFFERED_READ;				//function number
		R2 = [inodeTableEntry + 8 + (lSeek/512)];	//disk block number corresponding to block index given by lseek/512
		R3 = (lSeek % 512);				//block offset
		R4 = memBufferAddr;				//memory buffer address
		call FILE_MANAGER;
		multipop(R6, R7, R8, R9, R10, R11, R12, R13, R14);
	

		//incrementing lseek
		[openFileTableEntry + 2] = [openFileTableEntry + 2] + 1;	

	endif;
			
	//releasing lock on file
	multipush(R7, R8, R9, R10, R11, R12, R13, R14);
	R1 = RELEASE_INODE;		//function number
	R2 = inodeTableIndex;		//inode index
	R3 = [SYSTEM_STATUS_TABLE + 1]; //PID
	call RESOURCE_MANAGER;	
	multipop(R7, R8, R9, R10, R11, R12, R13, R14);

	SP = userSP;

	//Reset MODE FLAG to 0
	[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0;

	ireturn;
endif;
